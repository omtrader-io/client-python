# coding: utf-8

"""
    OMTrader Trader's API

    OMTrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from omtrader.rest.models.model_liqudation_status import ModelLiqudationStatus
from omtrader.rest.models.model_trade_type import ModelTradeType
from typing import Optional, Set
from typing_extensions import Self

class ModelTradeAccount(BaseModel):
    """
    ModelTradeAccount
    """ # noqa: E501
    assets: Optional[Union[StrictFloat, StrictInt]] = None
    balance: Optional[Union[StrictFloat, StrictInt]] = None
    blocked_commission: Optional[Union[StrictFloat, StrictInt]] = None
    blocked_profit: Optional[Union[StrictFloat, StrictInt]] = None
    client_id: Optional[StrictInt] = None
    credit: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = Field(default=None, description="currency of the account")
    currency_digits: Optional[StrictInt] = None
    day_profit: Optional[Union[StrictFloat, StrictInt]] = None
    deals: Optional[List[ModelDeal]] = None
    enable_risk_management: Optional[StrictBool] = Field(default=None, description="These fields overide positions S/L works global for account level P/L Control flow for day then week then month in case defined in current unit")
    equity: Optional[Union[StrictFloat, StrictInt]] = None
    floating: Optional[Union[StrictFloat, StrictInt]] = None
    group_id: Optional[StrictInt] = Field(default=None, description="this trade account if part of a group")
    id: Optional[StrictInt] = None
    leverage: Optional[StrictInt] = Field(default=None, description="1:x where X = 5000 down to 1 use group level if ZERP")
    liabilities: Optional[Union[StrictFloat, StrictInt]] = None
    liqudation_status: Optional[ModelLiqudationStatus] = Field(default=None, description="liquidation status")
    margin: Optional[Union[StrictFloat, StrictInt]] = None
    margin_free: Optional[Union[StrictFloat, StrictInt]] = None
    margin_initial: Optional[Union[StrictFloat, StrictInt]] = None
    margin_level: Optional[Union[StrictFloat, StrictInt]] = None
    margin_leverage: Optional[Union[StrictFloat, StrictInt]] = None
    margin_maintenance: Optional[Union[StrictFloat, StrictInt]] = None
    max_day_loss: Optional[Union[StrictFloat, StrictInt]] = None
    max_day_profit: Optional[Union[StrictFloat, StrictInt]] = None
    max_month_loss: Optional[Union[StrictFloat, StrictInt]] = None
    max_month_profit: Optional[Union[StrictFloat, StrictInt]] = None
    max_week_loss: Optional[Union[StrictFloat, StrictInt]] = None
    max_week_profit: Optional[Union[StrictFloat, StrictInt]] = None
    month_profit: Optional[Union[StrictFloat, StrictInt]] = None
    orders: Optional[List[ModelOrder]] = None
    positions: Optional[List[ModelPosition]] = None
    profit: Optional[Union[StrictFloat, StrictInt]] = None
    storage: Optional[Union[StrictFloat, StrictInt]] = None
    trade_type: Optional[ModelTradeType] = Field(default=None, description="account trading properties")
    user: Optional[Dict[str, Any]] = None  # Changed from ModelUser to avoid missing dependency
    user_id: Optional[StrictInt] = None
    week_profit: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["assets", "balance", "blocked_commission", "blocked_profit", "client_id", "credit", "currency", "currency_digits", "day_profit", "deals", "enable_risk_management", "equity", "floating", "group_id", "id", "leverage", "liabilities", "liqudation_status", "margin", "margin_free", "margin_initial", "margin_level", "margin_leverage", "margin_maintenance", "max_day_loss", "max_day_profit", "max_month_loss", "max_month_profit", "max_week_loss", "max_week_profit", "month_profit", "orders", "positions", "profit", "storage", "trade_type", "user", "user_id", "week_profit"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelTradeAccount from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in deals (list)
        _items = []
        if self.deals:
            for _item_deals in self.deals:
                if _item_deals:
                    _items.append(_item_deals.to_dict())
            _dict['deals'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in orders (list)
        _items = []
        if self.orders:
            for _item_orders in self.orders:
                if _item_orders:
                    _items.append(_item_orders.to_dict())
            _dict['orders'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in positions (list)
        _items = []
        if self.positions:
            for _item_positions in self.positions:
                if _item_positions:
                    _items.append(_item_positions.to_dict())
            _dict['positions'] = _items
        # user is now a dict, so no need to call to_dict()
        if self.user:
            _dict['user'] = self.user
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelTradeAccount from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assets": obj.get("assets"),
            "balance": obj.get("balance"),
            "blocked_commission": obj.get("blocked_commission"),
            "blocked_profit": obj.get("blocked_profit"),
            "client_id": obj.get("client_id"),
            "credit": obj.get("credit"),
            "currency": obj.get("currency"),
            "currency_digits": obj.get("currency_digits"),
            "day_profit": obj.get("day_profit"),
            "deals": [ModelDeal.from_dict(_item) for _item in obj["deals"]] if obj.get("deals") is not None else None,
            "enable_risk_management": obj.get("enable_risk_management"),
            "equity": obj.get("equity"),
            "floating": obj.get("floating"),
            "group_id": obj.get("group_id"),
            "id": obj.get("id"),
            "leverage": obj.get("leverage"),
            "liabilities": obj.get("liabilities"),
            "liqudation_status": obj.get("liqudation_status"),
            "margin": obj.get("margin"),
            "margin_free": obj.get("margin_free"),
            "margin_initial": obj.get("margin_initial"),
            "margin_level": obj.get("margin_level"),
            "margin_leverage": obj.get("margin_leverage"),
            "margin_maintenance": obj.get("margin_maintenance"),
            "max_day_loss": obj.get("max_day_loss"),
            "max_day_profit": obj.get("max_day_profit"),
            "max_month_loss": obj.get("max_month_loss"),
            "max_month_profit": obj.get("max_month_profit"),
            "max_week_loss": obj.get("max_week_loss"),
            "max_week_profit": obj.get("max_week_profit"),
            "month_profit": obj.get("month_profit"),
            "orders": [ModelOrder.from_dict(_item) for _item in obj["orders"]] if obj.get("orders") is not None else None,
            "positions": [ModelPosition.from_dict(_item) for _item in obj["positions"]] if obj.get("positions") is not None else None,
            "profit": obj.get("profit"),
            "storage": obj.get("storage"),
            "trade_type": obj.get("trade_type"),
            "user": obj.get("user"),  # Changed from ModelUser.from_dict to direct assignment
            "user_id": obj.get("user_id"),
            "week_profit": obj.get("week_profit")
        })
        return _obj

from omtrader.rest.models.model_deal import ModelDeal
from omtrader.rest.models.model_order import ModelOrder
from omtrader.rest.models.model_position import ModelPosition
# Removed ModelUser import to avoid missing dependency
# TODO: Rewrite to not use raise_errors
ModelTradeAccount.model_rebuild(raise_errors=False)

