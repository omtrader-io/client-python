# coding: utf-8

"""
    OMTrader Trader's API

    OMTrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from omtrader.rest.models.model_channel_type import ModelChannelType
from omtrader.rest.models.model_direction_type import ModelDirectionType
from omtrader.rest.models.model_reason_type import ModelReasonType
from omtrader.rest.models.model_side_type import ModelSideType
from omtrader.rest.models.model_symbol import ModelSymbol
from typing import Optional, Set
from typing_extensions import Self

class ModelDeal(BaseModel):
    """
    ModelDeal
    """ # noqa: E501
    account: Optional[ModelTradeAccount] = None
    account_id: Optional[StrictInt] = None
    action: Optional[StrictInt] = None
    channel: Optional[ModelChannelType] = None
    closed_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="lot which closed partially so we need to get closing_order_ids from the table")
    comment: Optional[StrictStr] = None
    commission: Optional[Union[StrictFloat, StrictInt]] = None
    contract_size: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictInt] = None
    dealer_id: Optional[StrictInt] = None
    digits: Optional[StrictInt] = None
    digits_currency: Optional[StrictInt] = None
    direction: Optional[ModelDirectionType] = None
    entry: Optional[StrictInt] = None
    external_id: Optional[StrictStr] = Field(default=None, description="id of position on LP")
    external_volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="volume of position on LP")
    external_volume_closed: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="volume of position on LP")
    fee: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictInt] = None
    market_ask: Optional[Union[StrictFloat, StrictInt]] = None
    market_bid: Optional[Union[StrictFloat, StrictInt]] = None
    market_last: Optional[Union[StrictFloat, StrictInt]] = None
    order_id: Optional[StrictInt] = Field(default=None, description="which order this deal belong to")
    position_id: Optional[StrictInt] = Field(default=None, description="which position deal belong to")
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price of deal")
    price_position: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price of position on LP")
    price_sl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price of stop loss")
    price_tp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price of take profit")
    profit: Optional[Union[StrictFloat, StrictInt]] = None
    profit_raw: Optional[Union[StrictFloat, StrictInt]] = None
    reason: Optional[ModelReasonType] = None
    side: Optional[ModelSideType] = None
    storage: Optional[Union[StrictFloat, StrictInt]] = None
    swap: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="swap for this deal from symbol swap")
    symbol: Optional[ModelSymbol] = None
    symbol_id: Optional[StrictInt] = None
    tick_size: Optional[Union[StrictFloat, StrictInt]] = None
    tick_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tick value of symbol")
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictInt] = None
    volume: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total lot")
    __properties: ClassVar[List[str]] = ["account", "account_id", "action", "channel", "closed_volume", "comment", "commission", "contract_size", "created_at", "created_by", "dealer_id", "digits", "digits_currency", "direction", "entry", "external_id", "external_volume", "external_volume_closed", "fee", "id", "market_ask", "market_bid", "market_last", "order_id", "position_id", "price", "price_position", "price_sl", "price_tp", "profit", "profit_raw", "reason", "side", "storage", "swap", "symbol", "symbol_id", "tick_size", "tick_value", "updated_at", "updated_by", "volume"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelDeal from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of symbol
        if self.symbol:
            _dict['symbol'] = self.symbol.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelDeal from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": ModelTradeAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "account_id": obj.get("account_id"),
            "action": obj.get("action"),
            "channel": obj.get("channel"),
            "closed_volume": obj.get("closed_volume"),
            "comment": obj.get("comment"),
            "commission": obj.get("commission"),
            "contract_size": obj.get("contract_size"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "dealer_id": obj.get("dealer_id"),
            "digits": obj.get("digits"),
            "digits_currency": obj.get("digits_currency"),
            "direction": obj.get("direction"),
            "entry": obj.get("entry"),
            "external_id": obj.get("external_id"),
            "external_volume": obj.get("external_volume"),
            "external_volume_closed": obj.get("external_volume_closed"),
            "fee": obj.get("fee"),
            "id": obj.get("id"),
            "market_ask": obj.get("market_ask"),
            "market_bid": obj.get("market_bid"),
            "market_last": obj.get("market_last"),
            "order_id": obj.get("order_id"),
            "position_id": obj.get("position_id"),
            "price": obj.get("price"),
            "price_position": obj.get("price_position"),
            "price_sl": obj.get("price_sl"),
            "price_tp": obj.get("price_tp"),
            "profit": obj.get("profit"),
            "profit_raw": obj.get("profit_raw"),
            "reason": obj.get("reason"),
            "side": obj.get("side"),
            "storage": obj.get("storage"),
            "swap": obj.get("swap"),
            "symbol": ModelSymbol.from_dict(obj["symbol"]) if obj.get("symbol") is not None else None,
            "symbol_id": obj.get("symbol_id"),
            "tick_size": obj.get("tick_size"),
            "tick_value": obj.get("tick_value"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "volume": obj.get("volume")
        })
        return _obj

from omtrader.rest.models.model_trade_account import ModelTradeAccount
# TODO: Rewrite to not use raise_errors
ModelDeal.model_rebuild(raise_errors=False)

