# coding: utf-8

"""
    OMTrader Trader's API

    OMTrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from omtrader.rest.models.model_calc_type import ModelCalcType
from omtrader.rest.models.model_execution_mode import ModelExecutionMode
from omtrader.rest.models.model_fill_policy import ModelFillPolicy
from omtrader.rest.models.model_swaptype import ModelSwaptype
from omtrader.rest.models.model_symbol_class import ModelSymbolClass
from omtrader.rest.models.model_symbol_status import ModelSymbolStatus
from omtrader.rest.models.model_trade_level import ModelTradeLevel
from typing import Optional, Set
from typing_extensions import Self

class MessagingViewSymbol(BaseModel):
    """
    MessagingViewSymbol
    """ # noqa: E501
    base_currency: Optional[StrictStr] = None
    broker_fee: Optional[Union[StrictFloat, StrictInt]] = None
    buy_limit: Optional[Union[StrictFloat, StrictInt]] = None
    buy_stop: Optional[Union[StrictFloat, StrictInt]] = None
    buy_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    calculation: Optional[ModelCalcType] = None
    chart_mode: Optional[StrictInt] = None
    close: Optional[Union[StrictFloat, StrictInt]] = None
    contract_size: Optional[Union[StrictFloat, StrictInt]] = None
    desc: Optional[StrictStr] = None
    digits: Optional[StrictInt] = None
    enabled: Optional[StrictBool] = None
    execution: Optional[ModelExecutionMode] = None
    expiration: Optional[StrictStr] = None
    filling: Optional[ModelFillPolicy] = None
    gtc: Optional[StrictInt] = None
    high_ask: Optional[Union[StrictFloat, StrictInt]] = None
    high_bid: Optional[Union[StrictFloat, StrictInt]] = None
    id: Optional[StrictInt] = None
    isin: Optional[StrictStr] = None
    last_ask: Optional[Union[StrictFloat, StrictInt]] = None
    last_bid: Optional[Union[StrictFloat, StrictInt]] = None
    low_ask: Optional[Union[StrictFloat, StrictInt]] = None
    low_bid: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_buy_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_buy_stop: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_buy_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_margin_buy: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_margin_sell: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_sell_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_sell_stop: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_sell_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maker_fee: Optional[Union[StrictFloat, StrictInt]] = None
    margin_buy: Optional[Union[StrictFloat, StrictInt]] = None
    margin_flags: Optional[StrictInt] = None
    margin_initial: Optional[Union[StrictFloat, StrictInt]] = None
    margin_maintenance: Optional[Union[StrictFloat, StrictInt]] = None
    margin_sell: Optional[Union[StrictFloat, StrictInt]] = None
    max_value: Optional[Union[StrictFloat, StrictInt]] = None
    min_value: Optional[Union[StrictFloat, StrictInt]] = None
    open: Optional[Union[StrictFloat, StrictInt]] = None
    orders: Optional[StrictStr] = None
    quote_currency: Optional[StrictStr] = None
    quote_scale: Optional[Union[StrictFloat, StrictInt]] = None
    quote_sessions: Optional[StrictStr] = None
    sell_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sell_stop: Optional[Union[StrictFloat, StrictInt]] = None
    sell_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    spread: Optional[StrictInt] = None
    spread_balance: Optional[StrictInt] = None
    status: Optional[ModelSymbolStatus] = None
    step: Optional[Union[StrictFloat, StrictInt]] = None
    stop_level: Optional[StrictInt] = None
    swap_long: Optional[Union[StrictFloat, StrictInt]] = None
    swap_short: Optional[Union[StrictFloat, StrictInt]] = None
    swap_type: Optional[ModelSwaptype] = None
    swaps_enabled: Optional[StrictBool] = None
    symbol: Optional[StrictStr] = None
    symbol_class: Optional[ModelSymbolClass] = None
    symbol_scale: Optional[Union[StrictFloat, StrictInt]] = None
    time_limit: Optional[StrictStr] = None
    trade_level: Optional[ModelTradeLevel] = None
    trade_sessions: Optional[StrictStr] = None
    ts: Optional[StrictInt] = None
    volume: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["base_currency", "broker_fee", "buy_limit", "buy_stop", "buy_stop_limit", "calculation", "chart_mode", "close", "contract_size", "desc", "digits", "enabled", "execution", "expiration", "filling", "gtc", "high_ask", "high_bid", "id", "isin", "last_ask", "last_bid", "low_ask", "low_bid", "maintenance_buy_limit", "maintenance_buy_stop", "maintenance_buy_stop_limit", "maintenance_margin_buy", "maintenance_margin_sell", "maintenance_sell_limit", "maintenance_sell_stop", "maintenance_sell_stop_limit", "maker_fee", "margin_buy", "margin_flags", "margin_initial", "margin_maintenance", "margin_sell", "max_value", "min_value", "open", "orders", "quote_currency", "quote_scale", "quote_sessions", "sell_limit", "sell_stop", "sell_stop_limit", "spread", "spread_balance", "status", "step", "stop_level", "swap_long", "swap_short", "swap_type", "swaps_enabled", "symbol", "symbol_class", "symbol_scale", "time_limit", "trade_level", "trade_sessions", "ts", "volume"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagingViewSymbol from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of symbol_class
        if self.symbol_class:
            _dict['symbol_class'] = self.symbol_class.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagingViewSymbol from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_currency": obj.get("base_currency"),
            "broker_fee": obj.get("broker_fee"),
            "buy_limit": obj.get("buy_limit"),
            "buy_stop": obj.get("buy_stop"),
            "buy_stop_limit": obj.get("buy_stop_limit"),
            "calculation": obj.get("calculation"),
            "chart_mode": obj.get("chart_mode"),
            "close": obj.get("close"),
            "contract_size": obj.get("contract_size"),
            "desc": obj.get("desc"),
            "digits": obj.get("digits"),
            "enabled": obj.get("enabled"),
            "execution": obj.get("execution"),
            "expiration": obj.get("expiration"),
            "filling": obj.get("filling"),
            "gtc": obj.get("gtc"),
            "high_ask": obj.get("high_ask"),
            "high_bid": obj.get("high_bid"),
            "id": obj.get("id"),
            "isin": obj.get("isin"),
            "last_ask": obj.get("last_ask"),
            "last_bid": obj.get("last_bid"),
            "low_ask": obj.get("low_ask"),
            "low_bid": obj.get("low_bid"),
            "maintenance_buy_limit": obj.get("maintenance_buy_limit"),
            "maintenance_buy_stop": obj.get("maintenance_buy_stop"),
            "maintenance_buy_stop_limit": obj.get("maintenance_buy_stop_limit"),
            "maintenance_margin_buy": obj.get("maintenance_margin_buy"),
            "maintenance_margin_sell": obj.get("maintenance_margin_sell"),
            "maintenance_sell_limit": obj.get("maintenance_sell_limit"),
            "maintenance_sell_stop": obj.get("maintenance_sell_stop"),
            "maintenance_sell_stop_limit": obj.get("maintenance_sell_stop_limit"),
            "maker_fee": obj.get("maker_fee"),
            "margin_buy": obj.get("margin_buy"),
            "margin_flags": obj.get("margin_flags"),
            "margin_initial": obj.get("margin_initial"),
            "margin_maintenance": obj.get("margin_maintenance"),
            "margin_sell": obj.get("margin_sell"),
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "open": obj.get("open"),
            "orders": obj.get("orders"),
            "quote_currency": obj.get("quote_currency"),
            "quote_scale": obj.get("quote_scale"),
            "quote_sessions": obj.get("quote_sessions"),
            "sell_limit": obj.get("sell_limit"),
            "sell_stop": obj.get("sell_stop"),
            "sell_stop_limit": obj.get("sell_stop_limit"),
            "spread": obj.get("spread"),
            "spread_balance": obj.get("spread_balance"),
            "status": obj.get("status"),
            "step": obj.get("step"),
            "stop_level": obj.get("stop_level"),
            "swap_long": obj.get("swap_long"),
            "swap_short": obj.get("swap_short"),
            "swap_type": obj.get("swap_type"),
            "swaps_enabled": obj.get("swaps_enabled"),
            "symbol": obj.get("symbol"),
            "symbol_class": ModelSymbolClass.from_dict(obj["symbol_class"]) if obj.get("symbol_class") is not None else None,
            "symbol_scale": obj.get("symbol_scale"),
            "time_limit": obj.get("time_limit"),
            "trade_level": obj.get("trade_level"),
            "trade_sessions": obj.get("trade_sessions"),
            "ts": obj.get("ts"),
            "volume": obj.get("volume")
        })
        return _obj


