# coding: utf-8

"""
    Omtrader Trader's API

    Omtrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_client_preferred_method import ModelClientPreferredMethod
from openapi_client.models.model_client_status import ModelClientStatus
from openapi_client.models.model_client_type import ModelClientType
from openapi_client.models.model_document_type import ModelDocumentType
from openapi_client.models.model_education_level import ModelEducationLevel
from openapi_client.models.model_employment_industry import ModelEmploymentIndustry
from openapi_client.models.model_employment_status import ModelEmploymentStatus
from openapi_client.models.model_kyc_status import ModelKycStatus
from openapi_client.models.model_source_of_wealth import ModelSourceOfWealth
from openapi_client.models.model_trading_experience import ModelTradingExperience
from typing import Optional, Set
from typing_extensions import Self

class ModelClient(BaseModel):
    """
    ModelClient
    """ # noqa: E501
    accounts: Optional[List[ModelTradeAccount]] = None
    address: Optional[StrictStr] = None
    annual_deposit: Optional[Union[StrictFloat, StrictInt]] = None
    annual_income: Optional[Union[StrictFloat, StrictInt]] = None
    approval_date: Optional[StrictStr] = None
    approved_by: Optional[StrictInt] = None
    birth_date: Optional[StrictStr] = None
    cfd_experience: Optional[ModelTradingExperience] = None
    city: Optional[StrictStr] = None
    close_date: Optional[StrictStr] = None
    comment: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictInt] = None
    document_number: Optional[StrictStr] = None
    document_type: Optional[ModelDocumentType] = Field(default=None, description="Address Properties")
    education_level: Optional[ModelEducationLevel] = None
    email: Optional[StrictStr] = None
    employment_industry: Optional[ModelEmploymentIndustry] = None
    employment_status: Optional[ModelEmploymentStatus] = None
    expiry_date: Optional[StrictStr] = None
    external_id: Optional[StrictStr] = None
    family_name: Optional[StrictStr] = None
    first_name: Optional[StrictStr] = None
    forex_experience: Optional[ModelTradingExperience] = None
    futures_experience: Optional[ModelTradingExperience] = None
    gender: Optional[StrictStr] = None
    id: Optional[StrictInt] = None
    introducer: Optional[StrictStr] = None
    issue_date: Optional[StrictStr] = None
    kyc_status: Optional[ModelKycStatus] = None
    language: Optional[StrictStr] = None
    last_contact_date: Optional[StrictStr] = None
    lead_campaign: Optional[StrictStr] = None
    lead_source: Optional[StrictStr] = None
    local_number: Optional[StrictStr] = None
    manager_id: Optional[StrictInt] = None
    messengers: Optional[StrictStr] = None
    middle_name: Optional[StrictStr] = None
    mobile: Optional[StrictStr] = None
    national: Optional[StrictStr] = Field(default=None, description="Regulation")
    net_worth: Optional[Union[StrictFloat, StrictInt]] = None
    preferred_group: Optional[StrictInt] = None
    preferred_method: Optional[ModelClientPreferredMethod] = None
    social_networks: Optional[StrictStr] = None
    source_of_wealth: Optional[ModelSourceOfWealth] = None
    state: Optional[StrictStr] = None
    status: Optional[ModelClientStatus] = None
    stocks_experience: Optional[ModelTradingExperience] = None
    tax_id: Optional[StrictStr] = None
    title: Optional[StrictStr] = Field(default=None, description="Personal Properties")
    type: Optional[ModelClientType] = Field(default=None, description="Client properties")
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictInt] = None
    user_id: Optional[StrictInt] = None
    zip_code: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accounts", "address", "annual_deposit", "annual_income", "approval_date", "approved_by", "birth_date", "cfd_experience", "city", "close_date", "comment", "country", "created_at", "created_by", "document_number", "document_type", "education_level", "email", "employment_industry", "employment_status", "expiry_date", "external_id", "family_name", "first_name", "forex_experience", "futures_experience", "gender", "id", "introducer", "issue_date", "kyc_status", "language", "last_contact_date", "lead_campaign", "lead_source", "local_number", "manager_id", "messengers", "middle_name", "mobile", "national", "net_worth", "preferred_group", "preferred_method", "social_networks", "source_of_wealth", "state", "status", "stocks_experience", "tax_id", "title", "type", "updated_at", "updated_by", "user_id", "zip_code"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelClient from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in accounts (list)
        _items = []
        if self.accounts:
            for _item_accounts in self.accounts:
                if _item_accounts:
                    _items.append(_item_accounts.to_dict())
            _dict['accounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelClient from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accounts": [ModelTradeAccount.from_dict(_item) for _item in obj["accounts"]] if obj.get("accounts") is not None else None,
            "address": obj.get("address"),
            "annual_deposit": obj.get("annual_deposit"),
            "annual_income": obj.get("annual_income"),
            "approval_date": obj.get("approval_date"),
            "approved_by": obj.get("approved_by"),
            "birth_date": obj.get("birth_date"),
            "cfd_experience": obj.get("cfd_experience"),
            "city": obj.get("city"),
            "close_date": obj.get("close_date"),
            "comment": obj.get("comment"),
            "country": obj.get("country"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "document_number": obj.get("document_number"),
            "document_type": obj.get("document_type"),
            "education_level": obj.get("education_level"),
            "email": obj.get("email"),
            "employment_industry": obj.get("employment_industry"),
            "employment_status": obj.get("employment_status"),
            "expiry_date": obj.get("expiry_date"),
            "external_id": obj.get("external_id"),
            "family_name": obj.get("family_name"),
            "first_name": obj.get("first_name"),
            "forex_experience": obj.get("forex_experience"),
            "futures_experience": obj.get("futures_experience"),
            "gender": obj.get("gender"),
            "id": obj.get("id"),
            "introducer": obj.get("introducer"),
            "issue_date": obj.get("issue_date"),
            "kyc_status": obj.get("kyc_status"),
            "language": obj.get("language"),
            "last_contact_date": obj.get("last_contact_date"),
            "lead_campaign": obj.get("lead_campaign"),
            "lead_source": obj.get("lead_source"),
            "local_number": obj.get("local_number"),
            "manager_id": obj.get("manager_id"),
            "messengers": obj.get("messengers"),
            "middle_name": obj.get("middle_name"),
            "mobile": obj.get("mobile"),
            "national": obj.get("national"),
            "net_worth": obj.get("net_worth"),
            "preferred_group": obj.get("preferred_group"),
            "preferred_method": obj.get("preferred_method"),
            "social_networks": obj.get("social_networks"),
            "source_of_wealth": obj.get("source_of_wealth"),
            "state": obj.get("state"),
            "status": obj.get("status"),
            "stocks_experience": obj.get("stocks_experience"),
            "tax_id": obj.get("tax_id"),
            "title": obj.get("title"),
            "type": obj.get("type"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "user_id": obj.get("user_id"),
            "zip_code": obj.get("zip_code")
        })
        return _obj

from openapi_client.models.model_trade_account import ModelTradeAccount
# TODO: Rewrite to not use raise_errors
ModelClient.model_rebuild(raise_errors=False)

