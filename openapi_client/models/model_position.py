# coding: utf-8

"""
    Omtrader Trader's API

    Omtrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_exit_level import ModelExitLevel
from openapi_client.models.model_position_status import ModelPositionStatus
from openapi_client.models.model_reason_type import ModelReasonType
from openapi_client.models.model_side_type import ModelSideType
from openapi_client.models.model_symbol import ModelSymbol
from typing import Optional, Set
from typing_extensions import Self

class ModelPosition(BaseModel):
    """
    ModelPosition
    """ # noqa: E501
    account: Optional[ModelTradeAccount] = None
    account_id: Optional[StrictInt] = None
    action: Optional[StrictInt] = None
    comment: Optional[StrictStr] = Field(default=None, description="set by the trader")
    commission: Optional[Union[StrictFloat, StrictInt]] = None
    contract_size: Optional[Union[StrictFloat, StrictInt]] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictInt] = None
    dealer_id: Optional[StrictInt] = None
    deals: Optional[ModelDeal] = None
    digits: Optional[StrictInt] = Field(default=None, description="configured digits to use for this positions")
    digits_currency: Optional[StrictInt] = Field(default=None, description="currency digits")
    exit_level: Optional[ModelExitLevel] = Field(default=None, description="when to exit overide S/L")
    exit_loos: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="exit loos value for the position")
    exit_profit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="exit profit value for the position")
    external_id: Optional[StrictStr] = Field(default=None, description="id of position on LP")
    id: Optional[StrictInt] = None
    price_current: Optional[Union[StrictFloat, StrictInt]] = None
    price_open: Optional[Union[StrictFloat, StrictInt]] = None
    price_sl: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="stop loss")
    price_tp: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="take profit")
    profit: Optional[Union[StrictFloat, StrictInt]] = None
    rate_margin: Optional[Union[StrictFloat, StrictInt]] = None
    rate_profit: Optional[Union[StrictFloat, StrictInt]] = None
    reason: Optional[ModelReasonType] = None
    side: Optional[ModelSideType] = None
    status: Optional[ModelPositionStatus] = None
    storage: Optional[Union[StrictFloat, StrictInt]] = None
    swaps: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="swap fees")
    symbol: Optional[ModelSymbol] = None
    symbol_id: Optional[StrictInt] = Field(default=None, description="symbol id")
    total_profit: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total profit")
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictInt] = None
    volume_current: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="no of lots")
    volume_current_ext: Optional[Union[StrictFloat, StrictInt]] = None
    volume_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="no of lots")
    volume_initial_ext: Optional[Union[StrictFloat, StrictInt]] = None
    __properties: ClassVar[List[str]] = ["account", "account_id", "action", "comment", "commission", "contract_size", "created_at", "created_by", "dealer_id", "deals", "digits", "digits_currency", "exit_level", "exit_loos", "exit_profit", "external_id", "id", "price_current", "price_open", "price_sl", "price_tp", "profit", "rate_margin", "rate_profit", "reason", "side", "status", "storage", "swaps", "symbol", "symbol_id", "total_profit", "updated_at", "updated_by", "volume_current", "volume_current_ext", "volume_initial", "volume_initial_ext"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelPosition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of account
        if self.account:
            _dict['account'] = self.account.to_dict()
        # override the default output from pydantic by calling `to_dict()` of deals
        if self.deals:
            _dict['deals'] = self.deals.to_dict()
        # override the default output from pydantic by calling `to_dict()` of symbol
        if self.symbol:
            _dict['symbol'] = self.symbol.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelPosition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account": ModelTradeAccount.from_dict(obj["account"]) if obj.get("account") is not None else None,
            "account_id": obj.get("account_id"),
            "action": obj.get("action"),
            "comment": obj.get("comment"),
            "commission": obj.get("commission"),
            "contract_size": obj.get("contract_size"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "dealer_id": obj.get("dealer_id"),
            "deals": ModelDeal.from_dict(obj["deals"]) if obj.get("deals") is not None else None,
            "digits": obj.get("digits"),
            "digits_currency": obj.get("digits_currency"),
            "exit_level": obj.get("exit_level"),
            "exit_loos": obj.get("exit_loos"),
            "exit_profit": obj.get("exit_profit"),
            "external_id": obj.get("external_id"),
            "id": obj.get("id"),
            "price_current": obj.get("price_current"),
            "price_open": obj.get("price_open"),
            "price_sl": obj.get("price_sl"),
            "price_tp": obj.get("price_tp"),
            "profit": obj.get("profit"),
            "rate_margin": obj.get("rate_margin"),
            "rate_profit": obj.get("rate_profit"),
            "reason": obj.get("reason"),
            "side": obj.get("side"),
            "status": obj.get("status"),
            "storage": obj.get("storage"),
            "swaps": obj.get("swaps"),
            "symbol": ModelSymbol.from_dict(obj["symbol"]) if obj.get("symbol") is not None else None,
            "symbol_id": obj.get("symbol_id"),
            "total_profit": obj.get("total_profit"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by"),
            "volume_current": obj.get("volume_current"),
            "volume_current_ext": obj.get("volume_current_ext"),
            "volume_initial": obj.get("volume_initial"),
            "volume_initial_ext": obj.get("volume_initial_ext")
        })
        return _obj

from openapi_client.models.model_deal import ModelDeal
from openapi_client.models.model_trade_account import ModelTradeAccount
# TODO: Rewrite to not use raise_errors
ModelPosition.model_rebuild(raise_errors=False)

