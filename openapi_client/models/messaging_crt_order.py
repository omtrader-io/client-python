# coding: utf-8

"""
    Omtrader Trader's API

    Omtrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_expiration_policy import ModelExpirationPolicy
from openapi_client.models.model_order_type import ModelOrderType
from openapi_client.models.model_side_type import ModelSideType
from typing import Optional, Set
from typing_extensions import Self

class MessagingCrtOrder(BaseModel):
    """
    MessagingCrtOrder
    """ # noqa: E501
    account_id: StrictInt
    comment: Optional[StrictStr] = None
    expiration_police: Optional[ModelExpirationPolicy] = None
    order_price: Union[StrictFloat, StrictInt]
    price_sl: Optional[Union[StrictFloat, StrictInt]] = None
    price_tp: Optional[Union[StrictFloat, StrictInt]] = None
    side: Optional[ModelSideType] = None
    symbol_id: StrictInt
    time_expiration: Optional[StrictStr] = None
    type: Optional[ModelOrderType] = None
    user_id: StrictInt
    volume: Union[StrictFloat, StrictInt]
    __properties: ClassVar[List[str]] = ["account_id", "comment", "expiration_police", "order_price", "price_sl", "price_tp", "side", "symbol_id", "time_expiration", "type", "user_id", "volume"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of MessagingCrtOrder from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of MessagingCrtOrder from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "account_id": obj.get("account_id"),
            "comment": obj.get("comment"),
            "expiration_police": obj.get("expiration_police"),
            "order_price": obj.get("order_price"),
            "price_sl": obj.get("price_sl"),
            "price_tp": obj.get("price_tp"),
            "side": obj.get("side"),
            "symbol_id": obj.get("symbol_id"),
            "time_expiration": obj.get("time_expiration"),
            "type": obj.get("type"),
            "user_id": obj.get("user_id"),
            "volume": obj.get("volume")
        })
        return _obj


