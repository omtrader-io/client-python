# coding: utf-8

"""
    Omtrader Trader's API

    Omtrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_group_type import ModelGroupType
from openapi_client.models.model_margin_mode import ModelMarginMode
from typing import Optional, Set
from typing_extensions import Self

class ModelGroup(BaseModel):
    """
    ModelGroup
    """ # noqa: E501
    compensate_negative_balance: Optional[StrictBool] = None
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictInt] = None
    currency: Optional[StrictStr] = None
    currency_digits: Optional[StrictInt] = None
    default_leverage: Optional[StrictInt] = Field(default=None, description="Rules or Permissions")
    desc: StrictStr = Field(description="Common")
    full_stop_out: Optional[StrictBool] = None
    group_type: Optional[ModelGroupType] = Field(default=None, description="0-client group 1-admin group")
    groups: Optional[List[ModelGroup]] = Field(default=None, description="Models")
    id: Optional[StrictInt] = None
    limit_history: Optional[StrictInt] = None
    limit_orders: Optional[StrictInt] = None
    limit_positions: Optional[StrictInt] = None
    limit_positions_volume: Optional[StrictInt] = None
    limit_symbols: Optional[StrictInt] = None
    margin_call: Optional[Union[StrictFloat, StrictInt]] = None
    margin_mode: Optional[ModelMarginMode] = Field(default=None, description="Margin")
    margin_stop_out: Optional[Union[StrictFloat, StrictInt]] = None
    parent_id: Optional[StrictInt] = Field(default=None, description="parent group if not root otherwise zero")
    root: Optional[StrictBool] = None
    status: Optional[StrictStr] = None
    trade_accounts: Optional[List[ModelTradeAccount]] = None
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["compensate_negative_balance", "created_at", "created_by", "currency", "currency_digits", "default_leverage", "desc", "full_stop_out", "group_type", "groups", "id", "limit_history", "limit_orders", "limit_positions", "limit_positions_volume", "limit_symbols", "margin_call", "margin_mode", "margin_stop_out", "parent_id", "root", "status", "trade_accounts", "updated_at", "updated_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelGroup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in groups (list)
        _items = []
        if self.groups:
            for _item_groups in self.groups:
                if _item_groups:
                    _items.append(_item_groups.to_dict())
            _dict['groups'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in trade_accounts (list)
        _items = []
        if self.trade_accounts:
            for _item_trade_accounts in self.trade_accounts:
                if _item_trade_accounts:
                    _items.append(_item_trade_accounts.to_dict())
            _dict['trade_accounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelGroup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "compensate_negative_balance": obj.get("compensate_negative_balance"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "currency": obj.get("currency"),
            "currency_digits": obj.get("currency_digits"),
            "default_leverage": obj.get("default_leverage"),
            "desc": obj.get("desc"),
            "full_stop_out": obj.get("full_stop_out"),
            "group_type": obj.get("group_type"),
            "groups": [ModelGroup.from_dict(_item) for _item in obj["groups"]] if obj.get("groups") is not None else None,
            "id": obj.get("id"),
            "limit_history": obj.get("limit_history"),
            "limit_orders": obj.get("limit_orders"),
            "limit_positions": obj.get("limit_positions"),
            "limit_positions_volume": obj.get("limit_positions_volume"),
            "limit_symbols": obj.get("limit_symbols"),
            "margin_call": obj.get("margin_call"),
            "margin_mode": obj.get("margin_mode"),
            "margin_stop_out": obj.get("margin_stop_out"),
            "parent_id": obj.get("parent_id"),
            "root": obj.get("root"),
            "status": obj.get("status"),
            "trade_accounts": [ModelTradeAccount.from_dict(_item) for _item in obj["trade_accounts"]] if obj.get("trade_accounts") is not None else None,
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by")
        })
        return _obj

from openapi_client.models.model_trade_account import ModelTradeAccount
# TODO: Rewrite to not use raise_errors
ModelGroup.model_rebuild(raise_errors=False)

