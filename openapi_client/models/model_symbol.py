# coding: utf-8

"""
    Omtrader Trader's API

    Omtrader Trader's API docs

    The version of the OpenAPI document: 1.0
    Contact: support@omtrader.io
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.model_calc_type import ModelCalcType
from openapi_client.models.model_conversion_type import ModelConversionType
from openapi_client.models.model_execution_mode import ModelExecutionMode
from openapi_client.models.model_fill_policy import ModelFillPolicy
from openapi_client.models.model_swaptype import ModelSwaptype
from openapi_client.models.model_symbol_status import ModelSymbolStatus
from openapi_client.models.model_trade_level import ModelTradeLevel
from typing import Optional, Set
from typing_extensions import Self

class ModelSymbol(BaseModel):
    """
    ModelSymbol
    """ # noqa: E501
    base_currency: Optional[StrictStr] = Field(default=None, description="EUR")
    buy_limit: Optional[Union[StrictFloat, StrictInt]] = None
    buy_stop: Optional[Union[StrictFloat, StrictInt]] = None
    buy_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    calculation: Optional[ModelCalcType] = Field(default=None, description="Trades")
    contract_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Contract size for this symbol max 100,000")
    conversion_currency: Optional[StrictInt] = Field(default=None, description="pointing to another symbol")
    conversion_type: Optional[ModelConversionType] = Field(default=None, description="0-Multiply 1-Divide")
    created_at: Optional[StrictStr] = None
    created_by: Optional[StrictInt] = None
    data_source: Optional[ModelDataSource] = Field(default=None, alias="dataSource")
    data_source_feeder: Optional[StrictStr] = None
    data_source_symbol: Optional[StrictStr] = None
    delay: Optional[StrictInt] = Field(default=None, description="Delay")
    desc: Optional[StrictStr] = Field(default=None, description="description")
    digits: Optional[StrictInt] = Field(default=None, description="number of digits after the decimal point")
    enabled: Optional[StrictBool] = Field(default=None, description="if the symbol is enabled or not by the broker")
    execution: Optional[ModelExecutionMode] = Field(default=None, description="Exectuion")
    expiration: Optional[StrictStr] = Field(default=None, description="1-All 2-")
    filling: Optional[ModelFillPolicy] = Field(default=None, description="0=Fill or Kill 2 = Immidate or Cancel ..others")
    id: Optional[StrictInt] = None
    isin: Optional[StrictStr] = Field(default=None, description="International Securities Identifying Number.")
    larger_leg_enabled: Optional[StrictBool] = Field(default=None, description="larger leg enabled")
    maintenance_buy_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_buy_stop: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_buy_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_margin_buy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Maintence")
    maintenance_margin_sell: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="marging for future sell on this assest")
    maintenance_sell_limit: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_sell_stop: Optional[Union[StrictFloat, StrictInt]] = None
    maintenance_sell_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    margin_buy: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Margin rates Initial")
    margin_hedged: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="margin hedged")
    margin_initial: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Margins")
    margin_maintenance: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="margin maintence")
    margin_sell: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="marging for future sell on this assest")
    max_loss_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="max loss deviation")
    max_profit_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="max profit deviation")
    max_time_deviation: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="max time deviation")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Max lot value = 0.01")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Min lot value = 0.01")
    orders: Optional[StrictStr] = Field(default=None, description="1-All 2-")
    quote_currency: Optional[StrictStr] = Field(default=None, description="USD  quote currency (OR futures contract currency)")
    quote_sessions: Optional[StrictStr] = Field(default=None, description="Sessions")
    sell_limit: Optional[Union[StrictFloat, StrictInt]] = None
    sell_stop: Optional[Union[StrictFloat, StrictInt]] = None
    sell_stop_limit: Optional[Union[StrictFloat, StrictInt]] = None
    spread: Optional[StrictInt] = Field(default=None, description="1- floating 2-value")
    spread_balance: Optional[StrictInt] = Field(default=None, description="spread balance")
    status: Optional[ModelSymbolStatus] = Field(default=None, description="added by saif")
    step: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="lot step value = 0.01 , increment of lots")
    stop_level: Optional[StrictInt] = None
    swap_days: Optional[StrictStr] = Field(default=None, description="swap days ex: \"1,2,3,4,5,6,7\"")
    swap_days_year: Optional[StrictInt] = Field(default=None, description="swap days per year ex: 360")
    swap_long: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="swap for Buy positions.")
    swap_short: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="swap short charge of long swap")
    swap_type: Optional[ModelSwaptype] = Field(default=None, description="swap type to calc")
    swaps_enabled: Optional[StrictBool] = Field(default=None, description="swaps")
    symbol: Optional[StrictStr] = Field(default=None, description="Common")
    symbol_class_id: Optional[StrictInt] = None
    symbol_map: Optional[StrictStr] = Field(default=None, description="User defined symbol map")
    tick_size: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tick size")
    tick_value: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="tick value")
    time_limit: Optional[StrictStr] = Field(default=None, description="time limit for the symbol startDate-endDate")
    timeout: Optional[StrictInt] = Field(default=None, description="timeout in seconds if it exceeded then the symbol status will be changed to disable")
    trade_level: Optional[ModelTradeLevel] = Field(default=None, description="1=Full Access 2= Buy 3-Sell")
    trade_sessions: Optional[StrictStr] = Field(default=None, description="array [Day,Time]...")
    updated_at: Optional[StrictStr] = None
    updated_by: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["base_currency", "buy_limit", "buy_stop", "buy_stop_limit", "calculation", "contract_size", "conversion_currency", "conversion_type", "created_at", "created_by", "dataSource", "data_source_feeder", "data_source_symbol", "delay", "desc", "digits", "enabled", "execution", "expiration", "filling", "id", "isin", "larger_leg_enabled", "maintenance_buy_limit", "maintenance_buy_stop", "maintenance_buy_stop_limit", "maintenance_margin_buy", "maintenance_margin_sell", "maintenance_sell_limit", "maintenance_sell_stop", "maintenance_sell_stop_limit", "margin_buy", "margin_hedged", "margin_initial", "margin_maintenance", "margin_sell", "max_loss_deviation", "max_profit_deviation", "max_time_deviation", "max_value", "min_value", "orders", "quote_currency", "quote_sessions", "sell_limit", "sell_stop", "sell_stop_limit", "spread", "spread_balance", "status", "step", "stop_level", "swap_days", "swap_days_year", "swap_long", "swap_short", "swap_type", "swaps_enabled", "symbol", "symbol_class_id", "symbol_map", "tick_size", "tick_value", "time_limit", "timeout", "trade_level", "trade_sessions", "updated_at", "updated_by"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ModelSymbol from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of data_source
        if self.data_source:
            _dict['dataSource'] = self.data_source.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ModelSymbol from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "base_currency": obj.get("base_currency"),
            "buy_limit": obj.get("buy_limit"),
            "buy_stop": obj.get("buy_stop"),
            "buy_stop_limit": obj.get("buy_stop_limit"),
            "calculation": obj.get("calculation"),
            "contract_size": obj.get("contract_size"),
            "conversion_currency": obj.get("conversion_currency"),
            "conversion_type": obj.get("conversion_type"),
            "created_at": obj.get("created_at"),
            "created_by": obj.get("created_by"),
            "dataSource": ModelDataSource.from_dict(obj["dataSource"]) if obj.get("dataSource") is not None else None,
            "data_source_feeder": obj.get("data_source_feeder"),
            "data_source_symbol": obj.get("data_source_symbol"),
            "delay": obj.get("delay"),
            "desc": obj.get("desc"),
            "digits": obj.get("digits"),
            "enabled": obj.get("enabled"),
            "execution": obj.get("execution"),
            "expiration": obj.get("expiration"),
            "filling": obj.get("filling"),
            "id": obj.get("id"),
            "isin": obj.get("isin"),
            "larger_leg_enabled": obj.get("larger_leg_enabled"),
            "maintenance_buy_limit": obj.get("maintenance_buy_limit"),
            "maintenance_buy_stop": obj.get("maintenance_buy_stop"),
            "maintenance_buy_stop_limit": obj.get("maintenance_buy_stop_limit"),
            "maintenance_margin_buy": obj.get("maintenance_margin_buy"),
            "maintenance_margin_sell": obj.get("maintenance_margin_sell"),
            "maintenance_sell_limit": obj.get("maintenance_sell_limit"),
            "maintenance_sell_stop": obj.get("maintenance_sell_stop"),
            "maintenance_sell_stop_limit": obj.get("maintenance_sell_stop_limit"),
            "margin_buy": obj.get("margin_buy"),
            "margin_hedged": obj.get("margin_hedged"),
            "margin_initial": obj.get("margin_initial"),
            "margin_maintenance": obj.get("margin_maintenance"),
            "margin_sell": obj.get("margin_sell"),
            "max_loss_deviation": obj.get("max_loss_deviation"),
            "max_profit_deviation": obj.get("max_profit_deviation"),
            "max_time_deviation": obj.get("max_time_deviation"),
            "max_value": obj.get("max_value"),
            "min_value": obj.get("min_value"),
            "orders": obj.get("orders"),
            "quote_currency": obj.get("quote_currency"),
            "quote_sessions": obj.get("quote_sessions"),
            "sell_limit": obj.get("sell_limit"),
            "sell_stop": obj.get("sell_stop"),
            "sell_stop_limit": obj.get("sell_stop_limit"),
            "spread": obj.get("spread"),
            "spread_balance": obj.get("spread_balance"),
            "status": obj.get("status"),
            "step": obj.get("step"),
            "stop_level": obj.get("stop_level"),
            "swap_days": obj.get("swap_days"),
            "swap_days_year": obj.get("swap_days_year"),
            "swap_long": obj.get("swap_long"),
            "swap_short": obj.get("swap_short"),
            "swap_type": obj.get("swap_type"),
            "swaps_enabled": obj.get("swaps_enabled"),
            "symbol": obj.get("symbol"),
            "symbol_class_id": obj.get("symbol_class_id"),
            "symbol_map": obj.get("symbol_map"),
            "tick_size": obj.get("tick_size"),
            "tick_value": obj.get("tick_value"),
            "time_limit": obj.get("time_limit"),
            "timeout": obj.get("timeout"),
            "trade_level": obj.get("trade_level"),
            "trade_sessions": obj.get("trade_sessions"),
            "updated_at": obj.get("updated_at"),
            "updated_by": obj.get("updated_by")
        })
        return _obj

from openapi_client.models.model_data_source import ModelDataSource
# TODO: Rewrite to not use raise_errors
ModelSymbol.model_rebuild(raise_errors=False)

